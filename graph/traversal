#include<iostream.h>
#include<conio.h>
struct node 
{
    int info;
    bolean flag;
    struct node *start;
    strcut node *current;
};
struct stack
{
    int top;
    struct node* info;
    unsighned capacity;
}




void addnode(struct node *head,int x,int y,int z)
{
    if(head==NULL)
    {
        head->info=x;
        if(z==0)
            head->flag=1;
        else
            flag=0;
        strcut node *newnode =(struct node *)malloc(sizeof(struct node));
        newnode->info=y;
        if(z==0)
            newnode->flag=1;
        else
            newnode->flag=0;
        newnode->current =newnode->start=NULL;
        head->current=newnode;
        head-start=current;
        head->current++;
        head->current =NULL;
    }
    else
    {
        struct node *temp=head;
        struct node *temp1=head;
        struct stack *newstack=ctreate();
        while(temp->info!=x)
        {   if(z==0)        
                temp->flag=1;
            else
                temp->flag=0;
            temp->current=temp->start;
            while(temp->current!=NULL)
            {
                if(temp->current->info==x)
                {
                    temp=temp->current;
                    if(z)
                        temp->flag=0;
                    else
                        temp->flag=1;
                    break;
                }
                else
                {
                    if(z)
                    {
                        if(temp->current->flag==1)
                        {
                            temp->current->flag=0;
                            push(newstack,temp->current);
                            temp->current++;
                            if(temp->current==NULL)
                                temp=pop(newstack);
                        }
                    }
                    else
                    {
                        if(temp->current->flag==0)
                        {
                            temp->current->flag=1;
                            push(newstack,temp->current);
                            temp->current++;
                            if(temp1==NULL)
                                temp=pop(newstack);
                        }
                    }
                }
            }
        }
        struct node *newnode=(struct node*)malloc(sizeof(struct node));
        newnode->info=y;
        if(z)
            newnode->flag=0;
        else
            newnode->flag=1;
        newnode->current=newnode->start=NULL;
        temp->current=newnode;
        while(newstack->top<=0)
        {   if(z==0)        
                temp->flag=1;
            else
                temp->flag=0;
            temp->current=temp->start;
            while(temp->current!=NULL)
            {
                if(z)
                {
                    if(temp->current->flag==1)
                    {
                        temp->current->flag=0;
                        push(newstack,temp->current);
                        temp->current++;
                        if(temp->current==NULL)
                            temp=pop(newstack);
                    }
                }
                else
                {
                    if(temp->current->flag==0)
                    {
                        temp->current->flag=1;
                        push(newstack,temp->current);
                        temp->current++;
                        if(temp->current==NULL)
                        temp=pop(newstack);
                    }
                }
            }
        }
    }
}


void tr




//funtion to pop an element
int pop(struct stack *newstack)
{ 
  struct node * x=NULL;
  if(newstack->top>=0)
  {
    x=newstack->k[newstack->top];
    newstack->top--;
  }
  else
    cout<<"stack underflow";
   return x; 
}



//push an element in stack
void push(struct stack * newstack , struct node * info)
{
  if(stack->top<stack->capacity)
  {
    newstack->k[newstack->newstack++]=info;
  }
  else
    cout<<"stack overflow";
}




struct stack * create(unsigned size)
{
  struct stack * newstack=(struct stack*)malloc(sizeof(struct stack));
  newstack->top=-1;
  newstack->size=size;
  newstack->info= (struct node *)malloc(capacity*sizeof(struct node));
  return newstack;
}





