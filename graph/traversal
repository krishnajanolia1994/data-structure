#include<iostream.h>
#include<conio.h>
struct node 
{
    int info;
    struct node *start;
    strcut node *current;
};
struct stack
{
    int top;
    struct node* info;
    unsighned capacity;
}




void addnode(struct node *head,int x,int y,int)
{
    if(head==NULL)
    {
        head->info=x;
        strcut node *newnode =(struct node *)malloc(sizeof(struct node));
        newnode->info=y;
        current=newnode;
        start=current;
        current++;
        current =NULL;
    }
    else
    {
        struct nose *temp=head;
        struct stack *newstack=ctreate();
        while(temp->info!=x)
        {
            
        }
    }
}




//funtion to pop an element
int pop(struct stack *newstack)
{ 
  struct node * x=NULL;
  if(newstack->top>=0)
  {
    x=newstack->k[newstack->top];
    newstack->top--;
  }
  else
    cout<<"stack underflow";
   return x; 
}



//push an element in stack
void push(struct stack * newstack , struct node * info)
{
  if(stack->top<stack->capacity)
  {
    newstack->k[newstack->newstack++]=info;
  }
  else
    cout<<"stack overflow";
}




struct stack * create(unsigned size)
{
  struct stack * newstack=(struct stack*)malloc(sizeof(struct stack));
  newstack->top=-1;
  newstack->size=size;
  newstack->info= (struct node *)malloc(capacity*sizeof(struct node));
  return newstack;
}





