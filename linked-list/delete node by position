#include<iostrea.h>
#include<conio.h>
struct node
{
  int x;
  struct node *next;
}
//function which insert node at front
void pushfront(struct node *head , int x)
{
  struct node * newnode =(struct node *)malloc(sizeof(stuct node))
  newnode->x=x;
  newnode->next=NULL;
    if(heah==null)
  head=newnode;
  else
  {
    newnode->next=head;
    head=newnode;
  }
}
//function which insert a node after given node
void pushafter(struct node *prv , int x)
{
  struct node * newnode =(struct node *)malloc(sizeof(stuct node))
  newnode->x=x;
  newnode->next=NULL;
  struct node *temp=prv->next;
  prv->next=newnode;
  newnode->temp;
}
//function which insert node at end
void pushend(struct node *head , int x)
{
  struct node * newnode =(struct node *)malloc(sizeof(stuct node))
  newnode->x=x;
  newnode->next=NULL;
    if(heah==null)
  head=newnode;
  else
    {
    struct node * temp = head;
    while(temp->next!=NULL)
      temp=tem->next;
    temp->next=newnode;
    }
}
//delete node by key
void deletenode(struct node *head ,int info)
{
  struct node * temp;
  if(head->x==info)
  {
    temp=head;
    head=head-next;
    free(temp);
  }
  else
  {
    temp=head->next;
    struct node * prv head;
    int k=0;
    while(temp!=NULL)
    {
      if(temp->x==info)
      {
      k=1;
      break;
      }
      prv=prv->next;
      temp=temp->next;
    }
    if(k==1)
    {
      temp=temp->next;
      struct node* temp2=prv->next;
      prv->next=temp;
      free(temp2);
    }
}
void deleteaster(struct node* head, int x)
{
  struct node* temp=head;
  struct node * temp1=head->next;
  
  if(x==1)
  {
    head=temp1;
    free(temp)
  }
  else
  {
    int i;
    for(i=1;i<x;i++)
      temp=temp->next;
    if(temp->!=NULL)
    {
      temp1=temp->next->next;
      free(temp->next);
      temp->next=temp1;
    }
  }
}
void main()
{
clrscr();
int x,t,z;
cin>>x>>y>>z;
struct node* head= NULL;
pushront(head,x);
pushront(head,y);
pushront(head,z);
pushend(head,x);
pushend(head,y);
pushend(head,z);
pushend(head->next->next,z);
deletenode(head,z);
getch();
}
